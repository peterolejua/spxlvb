// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fit_linear_exploded
List fit_linear_exploded(const arma::mat& X, const arma::vec& Y, arma::vec mu, arma::vec omega, double c_pi, double d_pi, double tau_e, const arma::uvec& update_order, arma::vec mu_alpha, double tau_alpha, arma::vec tau_b, const size_t& max_iter, const double& tol);
RcppExport SEXP _spxlvb_fit_linear_exploded(SEXP XSEXP, SEXP YSEXP, SEXP muSEXP, SEXP omegaSEXP, SEXP c_piSEXP, SEXP d_piSEXP, SEXP tau_eSEXP, SEXP update_orderSEXP, SEXP mu_alphaSEXP, SEXP tau_alphaSEXP, SEXP tau_bSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type c_pi(c_piSEXP);
    Rcpp::traits::input_parameter< double >::type d_pi(d_piSEXP);
    Rcpp::traits::input_parameter< double >::type tau_e(tau_eSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type update_order(update_orderSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_alpha(mu_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau_alpha(tau_alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_b(tau_bSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_linear_exploded(X, Y, mu, omega, c_pi, d_pi, tau_e, update_order, mu_alpha, tau_alpha, tau_b, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spxlvb_fit_linear_exploded", (DL_FUNC) &_spxlvb_fit_linear_exploded, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_spxlvb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
