library(devtools)
devtools::document()
Rcpp::sourceCpp("src/common_helpers.h")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
remove.packages("spxlvb", lib="~/R/x86_64-pc-linux-gnu-library/4.5")
library(devtools)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(devtools)
library(Rcpp)
library(roxygen2)
devtools::clean_dll()
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(spxlvb)
